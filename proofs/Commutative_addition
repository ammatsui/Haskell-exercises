{-# LANGUAGE GADTs         #-}
{-# LANGUAGE TypeFamilies  #-}
{-# LANGUAGE TypeOperators #-}

-- | The natural numbers, encoded in types.
data Z
data S n

-- | Predicate describing natural numbers.
-- | This allows us to reason with `Nat`s.
data Natural :: * -> * where
    NumZ :: Natural Z
    NumS :: Natural n -> Natural (S n)

-- | Predicate describing equality of natural numbers.
data Equal :: * -> * -> * where
    EqlZ :: Equal Z Z
    EqlS :: Equal n m -> Equal (S n) (S m)

-- | Peano definition of addition.
type family (:+:) (n :: *) (m :: *) :: *
type instance Z :+: m = m
type instance S n :+: m = S (n :+: m)

-- | For any n, n = n.
reflexive :: Natural n -> Equal n n
reflexive NumZ     = EqlZ
reflexive (NumS n) = EqlS (reflexive n)

-- | if a = b, then b = a.
symmetric :: Equal a b -> Equal b a
symmetric EqlZ     = EqlZ
symmetric (EqlS a) = EqlS (symmetric a)

-- | if a = b and b = c, then a = c.
transitive :: Equal a b -> Equal b c -> Equal a c
transitive EqlZ     EqlZ     = EqlZ
transitive (EqlS a) (EqlS b) = EqlS (transitive a b)

lemma :: Natural a -> Natural b -> Equal (S (a :+: b)) (a :+: S b)
lemma NumZ     b = EqlS (reflexive b) -- 0 + b = b
lemma (NumS n) b = EqlS (lemma n b)

-- | a + b = b + a
plusCommutes :: Natural a -> Natural b -> Equal (a :+: b) (b :+: a)
plusCommutes NumZ     NumZ    = EqlZ
plusCommutes NumZ    (NumS n) = EqlS (plusCommutes NumZ n)
plusCommutes (NumS n) m       = transitive (EqlS (plusCommutes n m)) (lemma m n)  -- a + b = c = b + a => a + b = b + a
