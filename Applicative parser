module ApplicativeParser where

import Data.Char
import Prelude hiding (fmap)

-- | An ambiguous parser.
newtype Parser a = P { unP :: String -> [(String, a)] }

-- | Change the result of a parser.
pmap :: (a -> b) -> Parser a -> Parser b
pmap f p = P $ \str -> map (\(s, a) -> (s, f a)) ((unP p) str)

-- | Operator version of 'pmap'.
(<#>) :: (a -> b) -> Parser a -> Parser b
(<#>) = pmap

-- | Parse a value and replace it.
(<#) :: a -> Parser b -> Parser a
(<#) a = pmap (const a) 

infixl 4 <#>
infixl 4 <#

-- | Parse a character only when a predicate matches.
predP :: (Char -> Bool) -> Parser Char
predP p = P $ \str -> case str of
                      []   -> []
                      x:xs -> [(xs, x) | p x]

-- | Succeed only when parsing the given character.
charP :: Char -> Parser Char
charP c = predP (\a -> a == c)

-- | Inject a value into an identity parser.
inject :: a -> Parser a
inject x = P (\xs -> [(xs, x)])

-- Given a parser with a function value and another parser, parse the function
-- first and then the value, return a parser which applies the function to the
-- value.
(<@>) :: Parser (a -> b) -> Parser a -> Parser b
pf <@> px = P $ \str -> case unP pf str of
                        [] -> []
                        [(s, f)] -> unP (pmap f px) s

(<@) :: Parser a -> Parser b -> Parser a
pa <@ pb = const <#> pa <@> pb

(@>) :: Parser a -> Parser b -> Parser b
pa @> pb = (\a b -> b) <#> pa <@> pb

infixl 4 <@
infixl 4 @>
infixl 4 <@>

-- | Parse a whole string.
stringP :: String -> Parser String
stringP = foldr (\c ps -> (:) <#> charP c <@> ps) $ inject ""

-- | Construct a parser that never parses anything.
emptyP :: Parser a
emptyP = P $ const []

-- | Combine two parsers: When given an input, provide the results of both parser run on the input.
(<<>>) :: Parser a -> Parser a -> Parser a
(<<>>) p1 p2 = P $ \str -> ((unP p1) str) ++ ((unP p2) str)   

infixl 3 <<>>

-- | Apply the parser zero or more times. -- succeeds when parses nothing
many :: Parser a -> Parser [a]
many p = (:) <#> p <@> many p <<>> inject []

-- | Apply the parser one or more times. -- returns [] when pases nothing
some :: Parser a -> Parser [a]
some p = (:) <#> p <@> many p


-- | Apply a parser and return all ambiguous results, but only those where the input was fully consumed.
runParser :: Parser a -> String -> [a]
runParser p cs = map snd $ filter ((=="") . fst) ((unP p) cs)

-- | Apply a parser and only return a result, if there was only one unambiguous result with output fully consumed.
runParserUnique :: Parser a -> String -> Maybe a
runParserUnique p cs = case runParser p cs of
                       []   -> Nothing
                       x:[] -> Just x
                       x:xs -> Nothing

-- | Kinds of binary operators.
data BinOp = AddBO | MulBO deriving (Eq, Show)

-- | Some kind of arithmetic expression.
data Expr = ConstE Int
          | BinOpE BinOp Expr Expr
          | NegE Expr
          | ZeroE
          deriving (Eq, Show)

evalExpr :: Expr -> Int
evalExpr (ConstE a)           = a
evalExpr ZeroE                = 0
evalExpr (NegE e)             = - evalExpr e
evalExpr (BinOpE AddBO e1 e2) = evalExpr e1 + evalExpr e2
evalExpr (BinOpE MulBO e1 e2) = evalExpr e1 * evalExpr e2

-- | Parse arithmetic expressions, with the following grammar:
--
--     expr         ::= const | binOpExpr | neg | zero
--     const        ::= int
--     binOpExpr    ::= '(' expr ' ' binOp ' ' expr ')'
--     binOp        ::= '+' | '*'
--     neg          ::= '-' expr
--     zero         ::= 'z'
-- 
parseExpr :: String -> Maybe Expr
parseExpr = let 
          exprP  = constP <<>> zeroP <<>> negP <<>> binP 
          
          constP = pmap (ConstE . (\s -> read s :: Int)) (some (predP isNumber))
          
          zeroP  = charP 'z' @> inject ZeroE
          
          negP   = charP '-' @> pmap NegE exprP
          
          binP   = opExP <#> charP '(' <@> exprP <@> charP ' ' <@> opP <@> charP ' ' <@> exprP <@> charP ')'
          
          opExP _ l _ op _ r _   = (BinOpE op l r)
          
          opP    = addP <<>> mulP
          
          addP   = charP '+' @> inject AddBO 
          
          mulP   = charP '*' @> inject MulBO 
          
          in runParserUnique exprP
