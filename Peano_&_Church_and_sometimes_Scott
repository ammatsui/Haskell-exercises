{-# LANGUAGE 
  FlexibleInstances, 
  UndecidableInstances, 
  InstanceSigs,
  ScopedTypeVariables,
  RankNTypes #-}

import Data.List

type ISO a b = (a -> b, b -> a)

symm :: ISO a b -> ISO b a
symm (ab, ba) = (ba, ab)

substL :: ISO a b -> (a -> b)
substL = fst

substR :: ISO a b -> (b -> a)
substR = snd

liftISO2 :: ISO a b -> ISO (a -> a -> a) (b -> b -> b)
liftISO2 (ab, ba) = (\aaa b b' -> ab (aaa (ba b) (ba b')), \bbb a a' -> ba (bbb (ab a) (ab a')) )

-- A Natural Number is either Zero,
-- or a Successor (1 +) of Natural Number.
-- We have (+)/(*) on Natural Number, or (-) it.
-- Since Natrual Number do not have negative, forall x, 0 - x = 0.
-- We also have pow on Natrual Number
-- Since Haskell is lazy, we also have infinity

class Nat n where
  zero :: n
  successor :: n -> n
  nat :: a -> (n -> a) -> n -> a  -- Pattern Matching
  iter :: a -> (a -> a) -> n -> a -- Induction
  plus, minus, mult, pow :: n -> n -> n
  
  inf :: n
  inf = successor inf
  
  divide :: n -> n -> n
  l `divide` r | l == 0 && r == 0 = undefined
  l `divide` r | l < r = 0
  l `divide` r | otherwise = successor $ (l `minus` r) `divide` r
  -- notice (l `divide` 0) when l is not 0 will return inf
  
  isoP :: ISO n Peano 
  isoP = (iter zero successor, iter zero successor)
  
  toP :: n -> Peano
  toP = substL isoP

instance {-# OVERLAPPABLE #-} Nat n => Show n where
  show = show . toP

instance {-# OVERLAPPABLE #-} Nat n => Eq n where
  l == r = toP l == toP r

instance {-# OVERLAPPABLE #-} Nat n => Ord n where
  l `compare` r = toP l `compare` toP r

instance {-# OVERLAPPABLE #-} Nat n => Num n where
  abs = id
  signum = nat zero (const 1)
  fromInteger 0 = zero
  fromInteger n | n > 0 = successor $ fromInteger (n - 1)
  (+) = plus
  (*) = mult
  (-) = minus

-- Can encode Natrual Number directly as Algebraic Data Type(ADT).
data Peano = O | S Peano deriving (Show, Eq, Ord)

-- Define 0 - x = 0 for all x.
instance Nat Peano where
  zero = O
  successor p = S p
  
  plus O a = a
  plus (S p) a = S (plus p a)
  
  minus a O = a
  minus O a = O  -- so that we stay in the naturals
  minus (S a) (S p) = (minus a p)
  
  mult O a = O
  mult (S p) a = plus a (mult p a)
  
  pow a O = (S O)
  pow a (S p) = mult a (pow a p)
  
  nat a na n = case n of
               O     -> a
               (S k) -> na k
               
  iter a aa n = case  n of
                O     -> a
                (S k) -> aa (iter a aa k)

-- Peano is very similar to a basic data type in Haskell - List!
-- O is like [], and S is like : (except it lacks the head part)
-- When we want to store no information, we can use (), an empty tuple
-- This is different from storing nothing (called Void in Haskell),
-- as we can create a value of () by using (), 
-- but we cannot create a value of Void.

instance Nat [()] where
  zero = []
  successor x = ():x
  
--  plus
--  minus
--  mult 
--  pow
  
--  nat a na n 
  
--  iter a aa n 
  

-- Instead of defining Nat from zero, sucessor Nat (and get Peano),
-- We can define it from Pattern Matching
newtype Scott = Scott { runScott :: forall a. a -> (Scott -> a) -> a }
instance Nat Scott where
  zero = Scott const -- (\a _ -> a)
  successor a = Scott (\_ sa -> sa a)
  
 -- nat 
 
 -- iter
 
  plus = substR (liftISO2 isoP) plus
  minus = substR (liftISO2 isoP) minus
  mult = substR (liftISO2 isoP) mult
  pow = substR (liftISO2 isoP) pow

-- Or from induction!
newtype Church = Church { runChurch :: forall a. (a -> a) -> a -> a }
instance Nat Church where
  zero = Church const
  successor a = Church (\aa _ -> aa a)
  
  -- nat
  -- iter
  
 
  -- Implement the calculation (except minus) in the primitive way.
  -- Implement them by constructing Church explicitly.
  -- So plus should not use successor,
  -- mult should not use plus,
  -- pow should not use mult.
