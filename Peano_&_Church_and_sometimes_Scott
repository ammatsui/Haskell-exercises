{-# LANGUAGE 
  FlexibleInstances, 
  UndecidableInstances, 
  InstanceSigs,
  ScopedTypeVariables,
  RankNTypes #-}



import Data.List

type ISO a b = (a -> b, b -> a)

symm :: ISO a b -> ISO b a
symm (ab, ba) = (ba, ab)

substL :: ISO a b -> (a -> b)
substL = fst

substR :: ISO a b -> (b -> a)
substR = snd

liftISO2 :: ISO a b -> ISO (a -> a -> a) (b -> b -> b)
liftISO2 (ab, ba) = (\aaa b b' -> ab (aaa (ba b) (ba b')), \bbb a a' -> ba (bbb (ab a) (ab a')) )



class Nat n where
  zero :: n
  successor :: n -> n
  nat :: a -> (n -> a) -> n -> a  -- Pattern Matching
  iter :: a -> (a -> a) -> n -> a -- Induction
  plus, minus, mult, pow :: n -> n -> n
 
 -- laziness is cool, can have infinity
  inf :: n 
  inf = successor inf
  
  divide :: n -> n -> n
  l `divide` r | l == 0 && r == 0 = undefined
  l `divide` r | l < r = 0
  l `divide` r | otherwise = successor $ (l `minus` r) `divide` r
 
  
  isoP :: ISO n Peano 
  isoP = (iter zero successor, iter zero successor)
  
  toP :: n -> Peano
  toP = substL isoP

instance {-# OVERLAPPABLE #-} Nat n => Show n where
  show = show . toP

instance {-# OVERLAPPABLE #-} Nat n => Eq n where
  l == r = toP l == toP r

instance {-# OVERLAPPABLE #-} Nat n => Ord n where
  l `compare` r = toP l `compare` toP r

instance {-# OVERLAPPABLE #-} Nat n => Num n where
  abs = id
  signum = nat zero (const 1)
  fromInteger 0 = zero
  fromInteger n | n > 0 = successor $ fromInteger (n - 1)
  (+) = plus
  (*) = mult
  (-) = minus

-- We can encode Natrual Number directly as Algebraic Data Type(ADT).data Peano = O | S Peano deriving (Show, Eq, Ord)
data Peano = O | S Peano deriving (Show, Eq, Ord)

--  0 - x = 0 for all x.
instance Nat Peano where
  zero        = O
  successor p = S p
  
  plus O     a = a
  plus (S p) a = S (plus p a)
  
  minus a      O    = a
  minus O      a    = O  -- so that we stay in naturals
  minus (S a) (S p) = (minus a p)
  
  mult O     a = O
  mult (S p) a = plus a (mult p a)
  
  pow a O     = (S O)
  pow a (S p) = mult a (pow a p)
  
  nat a na n = case n of
               O     -> a
               (S k) -> na k
               
  iter a aa n = case n of
                O     -> a
                (S k) -> aa (iter a aa k)

-- Peano is very similar to a basic data type in Haskell - List!
-- O is like [], and S is like : (except it lacks the head part)
-- When we want to store no information, we can use (), an empty tuple


instance Nat [()] where
  zero        = []
  successor x = ():x
  
  nat a na n = case n of
               []   -> a
               ():x -> na x
               
  iter a aa n = case n of
                []   -> a
                ():x -> aa (iter a aa x)

  plus ns ms = ns ++ ms -- or similarly to Nat Peano
  
  minus [] ns           = []
  minus ns []           = ns
  minus (():ns) (():ms) = minus ns ms
  
  mult []      ns = []
  mult (():ms) ns = plus ns (mult ms ns)
  
  pow ns []      = ():[]
  pow ns (():ms) = mult ns (pow ns ms)
  
  -- OR
--  zero = []
--  successor = (():)
--  nat z _ [] = z
--  nat _ s (_:n) = s n
--  iter z f = foldl (\a _ -> f a) z
--  plus = (++)
--  minus = (\\)
--  mult = (>>)
--  l `pow` r = foldl mult 1 (map (const l) r)

-- pattern matching
newtype Scott = Scott { runScott :: forall a. a -> (Scott -> a) -> a }

instance Nat Scott where
  zero = Scott const -- (\a _ -> a)
  successor a = Scott (\_ sa -> sa a)
  
  nat a sa (Scott f) = f a sa
  
  iter a aa (Scott f) = f a (\s -> iter (aa a) aa s)
 
  plus  = substR (liftISO2 isoP) plus
  minus = substR (liftISO2 isoP) minus
  mult  = substR (liftISO2 isoP) mult
  pow   = substR (liftISO2 isoP) pow

-- induction
newtype Church = Church { runChurch :: forall a. (a -> a) -> a -> a }

instance Nat Church where
  zero                 = Church (\aa a -> a)
  successor (Church f) = Church (\aa a -> aa (f aa a))

--  nat z f (Church x) = maybe z f $ x (Just . maybe zero successor) Nothing
  nat a ca c = nat a (ca . substR isoP) $ toP c
  
  iter a aa (Church f) = f aa a
  
  minus = substR (liftISO2 isoP) minus
  
  plus (Church f) (Church g) = Church $ \aa a -> f aa (g aa a)
  
  mult (Church f) (Church g) = Church $ \aa   -> f (g aa) 
  
  pow (Church f) (Church g) = Church $ g f

-- OR  
--  Church l `plus` Church r = Church (\f x -> l f $ r f x)
--  Church l `mult` Church r = Church (\f -> l $ r f)
--  Church l `pow` Church r = Church $ r l
--  l `minus` (Church r) = r (nat 0 id) l
