{-# LANGUAGE ScopedTypeVariables, Rank2Types #-}
module ScottEncoding where

import Prelude hiding (null, length, map, foldl, foldr, take, fst, snd, curry, uncurry, concat, zip, (++))

newtype SPair   a b = SPair   { runPair   :: forall c. (a -> b -> c) -> c }
newtype SMaybe  a   = SMaybe  { runMaybe  :: forall b. b -> (a -> b) -> b }
newtype SEither a b = SEither { runEither :: forall c. (a -> c) -> (b -> c) -> c }
newtype SList   a   = SList   { runList   :: forall b. b -> (a -> SList a -> b) -> b }

-- newtype SPair a b = SPair { runPair :: forall c. (a -> b -> c) -> c }
toPair :: SPair a b -> (a,b)
toPair sp = runPair sp (,) -- (fst sp, snd sp)

fromPair :: (a,b) -> SPair a b
fromPair (a, b) = SPair (\p -> p a b)

fst :: SPair a b -> a
fst (SPair p) = p (\a _ -> a)

snd :: SPair a b -> b
snd (SPair p) = p (\_ b -> b)

swap :: SPair a b -> SPair b a
swap = fromPair . (\(a, b) -> (b, a)) . toPair

curry :: (SPair a b -> c) -> (a -> b -> c)
curry f = (\a -> (\b -> f (SPair (\p -> p a b) ) ) ) --curry f a b = f (fromPair (a, b))

uncurry :: (a -> b -> c) -> (SPair a b -> c)
uncurry f p = runPair p f

----------------------------------------------
-- newtype SMaybe a = SMaybe { runMaybe :: forall b. b -> (a -> b) -> b }
toMaybe :: SMaybe a -> Maybe a
toMaybe (SMaybe m) = m Nothing Just

fromMaybe :: Maybe a -> SMaybe a
fromMaybe Nothing  = SMaybe (\x _ -> x)
fromMaybe (Just a) = SMaybe (\_ f -> f a)

isJust :: SMaybe a -> Bool
isJust (SMaybe m) = m False (\x -> True)

isNothing :: SMaybe a -> Bool
isNothing (SMaybe m) = m True (\x -> False)

catMaybes :: SList (SMaybe a) -> SList a
catMaybes = foldr (\ (SMaybe ma) sla -> (ma sla) $ \a -> cons a sla) ( SList (\ x _ -> x) )

----------------------------------------------
-- newtype SEither a b = SEither { runEither :: forall c. (a -> c) -> (b -> c) -> c }
toEither :: SEither a b -> Either a b
toEither (SEither e) = e Left Right

fromEither :: Either a b -> SEither a b
fromEither (Left l)  = SEither (\f _ -> f l)
fromEither (Right r) = SEither (\_ g -> g r)

isLeft :: SEither a b -> Bool
isLeft (SEither e) = e (\x -> True) (\x -> False)

isRight :: SEither a b -> Bool
isRight (SEither e) = e (\x -> False) (\x -> True)

partition :: SList (SEither a b) -> SPair (SList a) (SList b)
partition = foldr (\ (SEither e) (SPair p) -> SPair $ \f -> p (\ sla slb -> e (\a -> f (cons a sla) slb ) (\b -> f sla (cons b slb) )) ) (SPair (\t -> t (SList const) (SList const)))
--                       (a     ->    b     ->          b)                                                                                      -> b                      -> (SList a)

----------------------------------------------
-- newtype SList a = SList { runList :: forall b. b -> (a -> SList a -> b) -> b }
toList :: SList a -> [a]
toList sl = runList sl [] (\a sl -> a : (toList sl))

fromList :: [a] -> SList a
fromList []     = SList (\ x _ -> x)
fromList (a:as) = cons a (fromList as)

cons :: a -> SList a -> SList a
cons a l = SList (\ _ f -> f a l) 

-- like append
concat :: SList a -> SList a -> SList a
concat (SList a) sb = a sb $ (\ x as -> cons x (concat as sb))

null :: SList a -> Bool
null (SList l) = l True (\ _ _ -> False)

length :: SList a -> Int
length (SList l) = l 0 (\ _ x -> 1 + length x)

-- (a -> b) 'map' (SList { runList :: forall c. c -> (a -> SList a -> c) -> c })
-- SList { runList :: forall c. c -> (b -> SList b -> c) -> c }
map :: (a -> b) -> SList a -> SList b
map f (SList as) = SList $ \ c y -> (as c) (\ a sla -> y (f a) (map f sla) )

zip :: SList a -> SList b -> SList (SPair a b)
zip (SList sa) (SList sb) = SList $ \ c p -> (sa c) (\ a sla -> (sb c) (\ b slb -> p (SPair (\x -> x a b)) (zip sla slb)) )
-- need to introduce a b  somehow here                                 now can make a pair out of them 
-- p :: SPair a b -> SList (SPair a b) -> c, we need to apply p to SPair a b and SList (SPair a b) (which is recursively called zip)

foldl :: (b -> a -> b) -> b -> SList a -> b
foldl f b (SList sa) = (sa b) $ \ a sla -> foldl f (f b a) sla

foldr :: (a -> b -> b) -> b -> SList a -> b
foldr f b (SList sa) = (sa b) $ \ a sla -> f a (foldr f b sla) 

take :: Int -> SList a -> SList a
take n (SList sa) 
        | n <= 0    = SList (\ x _ -> x) -- we take nothing from list, so the result is an empty slist
        | otherwise = (sa (SList sa)) $ \ a sla -> cons a (take (n-1) sla)
-- before a sla hole with type
-- (a0 -> SList a0 -> SList a0) -> SList a
-- which is as if sa was applied to some SList 
-- sa :: forall b. b -> (a -> SList a -> b) -> b
        
