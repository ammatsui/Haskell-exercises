{-# LANGUAGE MultiParamTypeClasses, FlexibleContexts, AllowAmbiguousTypes, UndecidableInstances, FunctionalDependencies, FlexibleInstances, TypeFamilies #-}

module PolyvariadicFunctions where

  
class PolyAdd r where
  mkPolyAdd :: Int -> r
  
instance PolyAdd Int where
  mkPolyAdd = id
  
instance (a ~ Int, PolyAdd r) => PolyAdd (a -> r) where
  mkPolyAdd x y = mkPolyAdd (x + y)

-- `polyAdd` sums its arguments, all `Int`s.
polyAdd :: (PolyAdd r) => r 
polyAdd = mkPolyAdd 0 


class PolyList a r | r -> a where
  mkPolyList :: [a] -> r
  
instance PolyList a [a] where
  mkPolyList = id

instance PolyList a r => PolyList a (a -> r) where
  mkPolyList xs y = mkPolyList (xs ++ [y])
   
-- `polyList` turns its arguments into a list, polymorphically.
polyList :: (PolyList a r) => r
polyList = mkPolyList []


class PolyWords r where
  mkPolyWords :: Int -> String -> r   -- need int to not make spaces at the beginning of the sentence
  
instance PolyWords String where
  mkPolyWords _ str = str  -- ignore the int

instance PolyWords r => PolyWords (String -> r) where
  mkPolyWords pos xs ys = mkPolyWords (pos + 1) (if pos == 0 then ys else (xs ++ " " ++ ys))


polyWords :: (PolyWords r) => r
polyWords = mkPolyWords 0 ""




-- OR


{-# LANGUAGE FlexibleInstances,
             FlexibleContexts,
             UndecidableInstances,
             FunctionalDependencies,
             TypeFamilies #-}

module PolyvariadicFunctions where

class Variadic a r t | t -> r where
  liftVariadic :: ([a] -> r) -> t

instance Variadic a r r where
  liftVariadic f = f []

instance (a ~ a', Variadic a r t) => Variadic a r (a' -> t) where
  liftVariadic f h = liftVariadic (f . (h:))

polyAdd :: Variadic Int Int t => t
polyAdd = liftVariadic (sum :: [Int] -> Int)

polyWords :: Variadic String String t => t
polyWords = liftVariadic unwords

polyList :: Variadic a [a] t => t
polyList = liftVariadic id
