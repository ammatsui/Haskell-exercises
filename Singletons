{-# LANGUAGE NoImplicitPrelude, GADTs , DataKinds, TypeFamilies, TypeOperators, RankNTypes, DeriveFunctor #-}

module Singletons where

import Prelude hiding (drop, take, head, tail, index, zipWith, replicate, map, (++))

data Vec a n where
  VNil :: Vec a Zero
  VCons :: a -> Vec a n -> Vec a (Succ n)

-- promoted to type level by data kinds
data Nat = Zero | Succ Nat

data SNat a where
  SZero :: SNat Zero
  SSucc :: SNat a -> SNat (Succ a)

type family (a :: Nat) :< (b :: Nat) :: Bool
type instance m        :< Zero = False
type instance Zero     :< Succ n = True
type instance (Succ m) :< (Succ n) = m :< n

type family (Add (a :: Nat) (b :: Nat)) :: Nat
type instance (Add Zero     m) = m
type instance (Add (Succ n) m) = Succ (Add n m)

map :: (a -> b) -> Vec a n -> Vec b n
map f VNil         = VNil
map f (VCons x xs) = VCons (f x) (map f xs)

index :: ((a :< b) ~ True) => SNat a -> Vec s b -> s
index SZero     (VCons x xs) = x
index (SSucc n) (VCons x xs) = index n xs

replicate :: s -> SNat a -> Vec s a
replicate _ SZero     = VNil
replicate s (SSucc n) = VCons s $ replicate s n

-- Both vectors must be of equal length
zipWith :: (a -> b -> c) -> Vec a n -> Vec b n -> Vec c n
zipWith _ VNil         _            = VNil
zipWith f (VCons a as) (VCons b bs) = VCons (f a b) $ zipWith f as bs

(++) :: Vec v m -> Vec v n -> Vec v (Add m n)
(++) VNil         vn = vn
(++) (VCons x xs) vn = VCons x (xs ++ vn)


type family Min (a :: Nat) (b :: Nat) :: Nat
type instance (Min Zero     n)        = Zero
type instance (Min m        Zero)     = Zero
type instance (Min (Succ n) (Succ m)) = Succ (Min n m)

-- The semantics should match that of take for normal lists.
take :: SNat n -> Vec a m -> Vec a (Min n m)
take SZero     _            = VNil
take _         VNil         = VNil
take (SSucc m) (VCons x xs) = VCons x (take m xs)


type family Sub (a :: Nat) (b :: Nat) :: Nat
type instance (Sub Zero     n)        = Zero
type instance (Sub m        Zero)     = m
type instance (Sub (Succ m) (Succ n)) = Sub m n

-- The semantics should match that of drop for normal lists.
drop :: SNat n -> Vec a m -> Vec a (Sub m n)
drop SZero     v            = v
drop _         VNil         = VNil
drop (SSucc n) (VCons x xs) = drop n xs

head :: ((Zero :< n) ~ True) => Vec a n -> a
head (VCons x xs) = x

-- tail :: Vec a (Succ n) -> Vec a n
tail :: Vec a n -> Vec a (Sub n (Succ Zero))
tail VNil         = VNil
tail (VCons x xs) = xs
