
module Imperative (
  def, var, lit, while, (+=), (-=), (*=)
) where


import Control.Monad


-- for some reason I failed to import the State monad, so here it is
newtype State s a = State {runState :: s -> (a, s)}

instance Functor (State s) where
  fmap = liftM

instance Applicative (State s) where
  pure = return
  mf <*> mx = do f <- mf; x <- mx; return (f x)

instance Monad (State s) where
  return a        = State $ \s -> (a,s)
  (State f) >>= h = State $ \s -> let (a,s') = (f s) in (runState (h a) s')




data Lit a = Lit a
type Variable a = State Integer a


def :: Variable (Lit a) -> a
def (State f) = fromLit $ fst $ f 0

lit :: a -> Lit a
lit l = lit l

var :: a -> Variable (Lit a)
var v = State $ \x -> (lit v, x)

while :: Lit a -> (a -> Bool) -> Variable () -> Variable ()
while (Lit r) cond act = do
                 if cond r 
                       then act >> while (Lit r) cond act
                 else return ()

op :: (Integer -> Integer -> Integer) -> Lit Integer -> Lit Integer -> Variable ()
op f (Lit a) (Lit b) = State $ \ _ -> ((), f a b)

(+=) = op (+)
(-=) = op (-)
(*=) = op (*)

